{
    "titulo": "Lenguaje C",
    "1": {
        "titulo": [

        ],
        "descripcion": [
            "Escribir una función que permita calcular el área de un rectángulo dada su base y altura."
        ],
        "campos": {

        },
        "pie": [

        ]
    },
    "2": {
        "titulo": [

        ],
        "descripcion": [
            "Escribir una función que reciba un número entero *n* y calcule el factorial de *n*."
        ],
        "campos": {
            "a)": [
                "En forma iterativa."
            ],
            "b)": [
                "En forma recursiva."
            ]
        },
        "pie": [

        ]
    },
    "3": {
        "titulo": [

        ],
        "descripcion": [
            "Escribir una función que reciba un arreglo de números y la cantidad de elementos,",
            "y devuelva el promedio."
        ],
        "campos": {

        },
        "pie": [

        ]
    },
    "4": {
        "titulo": [

        ],
        "descripcion": [
            "Usando las funciones `printf` y `sizeof`, escribir un programa que imprima el tamaño",
            "en bytes de cada uno de los siguientes tipos:",
            "```c",
            "bool, char, short, int, long, float, double, bool*, char*, short*, int*, long*, float*, double*",
            "```"
        ],
        "campos": {

        },
        "pie": [

        ]
    },
    "5": {
        "titulo": [

        ],
        "descripcion": [
            "Implementar la función `unsigned int strlen(const char *s)` que devuelve la longitud",
            "de la cadena `s` (sin contar el último caracter `'\\0'`)."
        ],
        "campos": {
            "a)": [
                "En forma iterativa."
            ],
            "b)": [
                "En forma recursiva."
            ]
        },
        "pie": [

        ]
    },
    "6": {
        "titulo": [

        ],
        "descripcion": [
            "Implementar la función `void invertir(char *s)` que invierte la cadena `s` (*inplace*)."
        ],
        "campos": {

        },
        "pie": [

        ]
    },
    "7": {
        "titulo": [

        ],
        "descripcion": [
            "Implementar la función `void strcpy(const char *origen, char *destino)` que copia la",
            "cadena `origen` en la dirección de memoria apuntada por `destino`.",
            "Asumir que `destino` apunta a un arreglo de caracteres con espacio suficiente `(strlen(origen) + 1`)."
        ],
        "campos": {

        },
        "pie": [

        ]
    },
    "8": {
        "titulo": [

        ],
        "descripcion": [
            "Implementar una función que recibe un arreglo de números y su longitud y lo ordena",
            "mediante el algoritmo de ordenamiento por selección."
        ],
        "campos": {

        },
        "pie": [

        ]
    },
    "9": {
        "titulo": [

        ],
        "descripcion": [
            "Implementar una función que reciba un `mensaje` y dos números enteros `min` y `max`.",
            "La función debe pedir al usuario que ingrese un número entero entre `min` y `max` (inclusive) y devolverlo.",
            "Si el usuario ingresa un valor inválido se le debe informar y pedir que ingrese un",
            "nuevo valor, repitiendo hasta que ingrese un número válido."
        ],
        "campos": {

        },
        "pie": [

        ]
    },
    "10": {
        "titulo": [

        ],
        "descripcion": [
            "Implementar una función que reciba una cadena de texto y luego imprima la cadena",
            "enmarcada entre asteriscos (*).",
            "Asumir que la cadena no contiene ningún caracter `'\\n'`.\n",

            "Por ejemplo, si se recibe la cadena `\"Lenguaje C\"`, debe imprimir:",
            "```c",
            "**************",
            "* Lenguaje C *",
            "**************",
            "```"
        ],
        "campos": {

        },
        "pie": [

        ]
    },
    "11": {
        "titulo": [

        ],
        "descripcion": [
            "**⋆** Implementar una función que permita ejecutar cálculos matemáticos expresados en notación polaca inversa **¹**."
        ],
        "campos": {
            "Ejemplo:": [
                "`calcular_rpn(\"5 1 2 + 4 * + 3 -\")` devuelve `14`, ya que la expresión ingresada",
                "es equivalente a `5 + ((1 + 2) ∗ 4) − 3`."
            ]
        },
        "pie": [
            "Ayuda: El algoritmo de notación polaca inversa hace uso de una pila, que se puede implementar en C.",
            "¹ https://es.wikipedia.org/wiki/Notaci%C3%B3n_polaca_inversa"
        ]
    }
}