{
    "titulo": "Pilas y Colas",
    "1": {
        "titulo": [

        ],
        "descripcion": [
            "Escribir una clase `TorreDeControl` que modele el trabajo de una torre de control de un",
            "aeropuerto con una pista de aterrizaje. Los aviones que est√°n esperando para aterrizar",
            "tienen prioridad sobre los que est√°n esperando para despegar.\n",

            "La clase debe funcionar conforme al siguiente ejemplo:",
            "```python",
            ">>> torre = TorreDeControl()",
            ">>> torre.nuevo_arribo('AR156')",
            ">>> torre.nueva_partida('KLM1267')",
            ">>> torre.nuevo_arribo('AR32')",
            ">>> torre.ver_estado()",
            "Vuelos esperando para aterrizar: AR156, AR32",
            "Vuelos esperando para despegar: KLM1267",
            ">>> torre.asignar_pista()",
            "El vuelo AR156 aterriz√≥ con √©xito.",
            ">>> torre.asignar_pista()",
            "El vuelo AR32 aterriz√≥ con √©xito.",
            ">>> torre.asignar_pista()",
            "El vuelo KLM1267 despeg√≥ con √©xito.",
            ">>> torre.asignar_pista()",
            "No hay vuelos en espera.",
            "```"
        ],
        "campos": {

        },
        "pie": [

        ]
    },
    "2": {
        "titulo": [

        ],
        "descripcion": [
            "Escribir las clases `Impresora` y `Oficina` que permita modelar el funcionamiento de",
            "un conjunto de impresoras conectadas en red."
        ],
        "campos": {
            "Una impresora:": [
                "**‚Ä¢** Tiene un nombre, y una capacidad m√°xima de tinta.",
                "**‚Ä¢** Permite encolar un documento para imprimir (recibiendo el nombre del documento).",
                "**‚Ä¢** Permite imprimir el documento que est√° al frente de la cola.",
                "\t**‚Äì** Si no hay documentos encolados, se muestra un mensaje inform√°ndolo.",
                "\t**‚Äì** Si no hay tinta suficiente, se muestra un mensaje inform√°ndolo.",
                "\t**‚Äì** En caso contrario, se muestra el nombre del documento, y se gasta 1 unidad de tinta.",
                "**‚Ä¢** Permite cargar el cartucho de tinta."
            ],
            "Una oficina:": [
                "**‚Ä¢** Permite agregar una impresora",
                "**‚Ä¢** Permite obtener una impresora por nombre",
                "**‚Ä¢** Permite quitar una impresora por nombre",
                "**‚Ä¢** Permite obtener la impresora que tenga menos documentos encolados."
            ],
            "Ejemplo:": [
                "```python",
                ">>> o = Oficina()",
                ">>> o.agregar_impresora(Impresora('HP1234', 1))",
                ">>> o.agregar_impresora(Impresora('Epson666', 5))",
                ">>> o.impresora('HP1234').encolar('tp1.pdf')",
                ">>> o.impresora('Epson666').encolar('tp2.pdf')",
                ">>> o.impresora('HP1234').encolar('tp3.pdf')",
                ">>> o.obtener_impresora_libre().encolar('tp4.pdf') # se encola en Epson666",
                ">>> o.impresora('HP1234').imprimir()",
                "tp1.pdf impreso",
                ">>> o.impresora('HP1234').imprimir()",
                "No tengo tinta :(",
                ">>> o.impresora('HP1234').cargar_tinta()",
                ">>> o.impresora('HP1234').imprimir()",
                "tp3.pdf impreso",
                "```"
            ]
        },
        "pie": [

        ]
    },
    "3": {
        "titulo": [

        ],
        "descripcion": [
            "En la parada del colectivo 130 pueden ocurrir dos eventos diferentes:\n",

            "\t**‚Ä¢** Llega una persona.",
            "\t**‚Ä¢** Llega un colectivo con ùëõ asientos libres, y se suben al mismo todas las",
            "\t  personas que est√°n esperando, en orden de llegada, hasta que no quedan asientos libres.\n",

            "Cada evento se representa con una tupla que incluye:\n",

            "\t**‚Ä¢** El instante de tiempo (cantidad de segundos desde el inicio del d√≠a)",
            "\t**‚Ä¢** El tipo de evento, que puede ser 'p' (persona) o 'c' (colectivo).",
            "\t**‚Ä¢** En el caso de un evento de tipo 'c' hay un tercer elemento que es la cantidad de asientos libres.\n",

            "Escribir una funci√≥n que recibe una lista de eventos, ordenados cronol√≥gicamente,",
            "y devuelva el promedio de tiempo de espera de los pasajeros en la parada."
        ],
        "campos": {
            "Ejemplo:": [
                "```python",
                "promedio_espera([(35,'p'), (43,'p'), (80,'c',1), (98,'p'), (142,'c',2)])",
                "-> 62.6667 (calculado como (45+99+44) / 3)",
                "```"
            ]
        },
        "pie": [

        ]
    },
    "4": {
        "titulo": [

        ],
        "descripcion": [
            "**Juego de Cartas**"
        ],
        "campos": {
            "a)": [
                "Crear una clase `Carta` que contenga un palo y un valor."
            ],
            "b)": [
                "Crear una clase `Solitario` que permita apilar las cartas una arriba de otra,",
                "pero s√≥lo permita apilar una carta si es de un n√∫mero inmediatamente inferior",
                "y de distinto palo a la carta que est√° en el tope.",
                "Si se intenta apilar una carta incorrecta, debe lanzar una excepci√≥n."
            ]
        },
        "pie": [

        ]
    },
    "5": {
        "titulo": [

        ],
        "descripcion": [
            "Crear una clase `PilaConMaximo` que soporte las operaciones de `Pila`",
            "(`apilar(elemento)` y `desapilar()`), y adem√°s incluya el m√©todo `obtener_maximo()`",
            "en tiempo constante."
        ],
        "campos": {

        },
        "pie": [
            "Ayuda: Usar dos pilas, una para guardar los elementos y otra para guardar los m√°ximos."
        ]
    },
    "6": {
        "titulo": [

        ],
        "descripcion": [
            "Escribir una funci√≥n que recibe una expresi√≥n matem√°tica (en forma de cadena) y",
            "devuelve `True` si los par√©ntesis (**'()'**), corchetes (**'[]'**) y llaves (**'{}'**)",
            "est√°n correctamente balanceados, o `False` en caso contrario."
        ],
        "campos": {
            "Ejemplos": [
                "```python",
                "validar('(x+y)/2') -> True",
                "validar('[8*4(x+y)]+{2/5}') -> True",
                "validar('(x+y]/2') -> False",
                "validar('1+)2(+3') -> False",
                "```"
            ]
        },
        "pie": [

        ]
    },
    "7": {
        "titulo": [

        ],
        "descripcion": [
            "Escribir una funci√≥n llamada `tail` que recibe un archivo y un n√∫mero *N* e imprime",
            "las √∫ltimas *N* l√≠neas del archivo.",
            "Durante el transcurso de la funci√≥n no puede haber m√°s de *N* l√≠neas en memoria."
        ],
        "campos": {

        },
        "pie": [

        ]
    }
}