# 't=' for tab, 'n=' for new line at the end, or 'tn=' for both
# '[number]=<' to begin reading excercise, and '>' to finish (if not it will not append the string)

titulo=Modelo de Ejecucui√≥n de Funciones y Recursi√≥n


1=<
Escribir una funci√≥n recursiva que reciba un n√∫mero positivo ùëõ y devuelva la cantidad de d√≠gitos que tiene.
>

2=<
n=Escribir una funci√≥n recursiva que simule el siguiente experimento:

Se tiene una rata en una jaula con 3 caminos, entre los cuales elige al azar (cada uno tiene la misma probabilidad), si elige el *1*  luego de 3 minutos vuelve a la jaula, si elige el *2*  luego de 5 minutos vuelve a la jaula, en el caso de elegir el *3*  luego de 7 minutos sale de la jaula.
La rata no aprende, siempre elige entre los 3 caminos con la misma probabilidad, pero quiere su
n=libertad, por lo que recorrer√° los caminos hasta salir de la jaula.

La funci√≥n debe devolver el tiempo que tarda la rata en salir de la jaula.
>

3=<
Escribir una funci√≥n recursiva que reciba 2 enteros *n* y *b* y devuelva `True` si *n* es potencia de *b*.
Ejemplos:
```python
es_potencia(8, 2) -> True
es_potencia(64, 4) -> True
es_potencia(70, 10) -> False
```
>

4=<
Escribir una funcion recursiva que reciba como par√°metros dos cadenas *a* y *b*, y
devuelva una lista con las posiciones en donde se encuentra *b* dentro de *a*.
Ejemplo:
```python
posiciones_de("Un tete a tete con Tete", "te") -> [3, 5, 10, 12, 21]
```
>

5=<
Escribir dos funciones mutualmente recursivas `par(n)` e `impar(n)` que determinen la paridad
n=del numero natural dado, conociendo solo que:
t=**‚Ä¢** 1 es impar.
t=**‚Ä¢** Si un n√∫mero es impar, su antecesor es par; y viceversa.
>

6=<
Escribir una funci√≥n recursiva que calcule recursivamente el n-√©simo n√∫mero triangular (el n√∫mero 1 + 2 + 3 + ‚ãØ + ùëõ).
>

7=<
Escribir una funci√≥n que calcule recursivamente cu√°ntos elementos hay en una pila, suponiendo que la pila s√≥lo tiene los m√©todos `apilar` y `desapilar`, y no altere el contenido de la pila.
>

8=<
Escribir una funcion recursiva que encuentre el mayor elemento de una lista.
>

9=<
Escribir una funci√≥n recursiva para replicar los elementos de una lista una cantidad *n* de veces.
Por ejemplo:
```python
replicar([1, 3, 3, 7], 2) -> ([1, 1, 3, 3, 3, 3, 7, 7])
```
>

10=<
Escribir una funcion recursiva que dada una cadena determine si en la misma hay m√°s letras A o letras E.
>

11=<
El tri√°ngulo de Pascal es un arreglo triangular de n√∫meros que se define de la siguiente manera:
Las filas se enumeran desde ùëõ = 0, de arriba hacia abajo. Los valores de cada fila se enumeran desde ùëò = 0 (de izquierda a derecha).
Los valores que se encuentran en los bordes del tri√°ngulo son 1.
n=Cualquier otro valor se calcula sumando los dos valores contiguos de la fila de arriba.
=ùëõ = 0                                1
=ùëõ = 1                             1       1
=ùëõ = 2                         1     2      1
=ùëõ = 3                     1     3       3     1
=ùëõ = 4                 1     4     6     4      1
=ùëõ = 5             1     5     10     10    5     1
n=ùëõ = 6         1      6     15   20   15    6      1

Escribir la funci√≥n recursiva `pascal(n, k)` que calcula el valor que se encuentra en la fila *n*
y la columna *k*.
Ejemplo:
```python
pascal(5, 2) -> 10
```
>

12=<
Ya sabemos que la implementaci√≥n recursiva del c√°lculo del n√∫mero de Fibonacci (ùêπùëõ = ùêπùëõ‚àí1 + ùêπùëõ‚àí2, ùêπ0 = 0, ùêπ1 = 1) es ineficiente porque muchas de las ramas calculan reiteradamente los mismos valores.
Escribir una funci√≥n `fibonacci(n)` que calcule el en√©simo n√∫mero de Fibonacci de forma recursiva pero que utilice un diccionario para almacenar los valores ya computados y no computarlos m√°s de una vez.
**Nota:** Ser√° necesario implementar una funci√≥n *wrapper* para cumplir con la firma de la funci√≥n
pedida.
>

13=<
Escribir una funci√≥n recursiva que reciba un conjunto de caracteres √∫nicos, y un n√∫mero ùëò, e imprima todas las posibles cadenas de longitud ùëò formadas con los caracteres dados (permitiendo caracteres repetidos).
Ejemplo: `combinaciones(['a', 'b', 'c'], 2)` debe imprimir `aa ab ac ba bb bc ca cb cc`.
>